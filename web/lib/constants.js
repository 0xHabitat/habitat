import TYPED_DATA from './typedData.js';

export { TYPED_DATA }

export const BRICK_ABI = [
  'event BlockBeacon()',
  'event ClaimUsername(address indexed account, bytes32 indexed shortString)',
  'event CommunityCreated(address indexed governanceToken, bytes32 communityId, string metadata)',
  'event Deposit(address token, address owner, uint256 value)',
  'event ModuleActivated(bytes32 communityId, address condition)',
  'event ModuleSubmitted(address src)',
  'event NewSolution(uint256 blockNumber, bytes32 solutionHash)',
  'event ProposalCreated(address indexed vault, bytes32 indexed proposalId, uint256 startDate, string title, bytes actions)',
  'event TokenTransfer(address indexed token, address indexed from, address indexed to, uint256 value)',
  'event VaultCreated(bytes32 indexed communityId, address indexed condition, address vaultAddress)',
  'event VotedOnProposal(bytes32 indexed proposalId)',
  'event Withdraw(address token, address owner, uint256 value)',
  'function BOND_AMOUNT() view returns (uint256)',
  'function INSPECTION_PERIOD() view returns (uint16)',
  'function INSPECTION_PERIOD_MULTIPLIER() view returns (uint256)',
  'function MAX_BLOCK_SIZE() view returns (uint24)',
  'function MAX_SOLUTION_SIZE() view returns (uint24)',
  'function VERSION() view returns (uint16)',
  'function accountDelegate(address) view returns (address)',
  'function activeModule(bytes32, address) view returns (uint256)',
  'function batchDeposit()',
  'function batchWithdraw()',
  'function blockMeta(uint256) view returns (uint256)',
  'function canFinalizeBlock(uint256 blockNumber) view returns (bool)',
  'function challenge()',
  'function challengeOffset() view returns (uint256)',
  'function createdAtBlock() view returns (uint256)',
  'function deposit(address token, uint256 amountOrId, address receiver)',
  'function dispute(uint256 blockNumber, uint256 bitmask)',
  'function erc20(address, address) view returns (uint256)',
  'function erc721(address, uint256) view returns (address)',
  'function executionPermits(uint256) view returns (bytes32)',
  'function finalizeSolution(uint256 blockNumber)',
  'function finalizedHeight() view returns (uint256)',
  'function getERC20Exit(address target, address owner) view returns (uint256)',
  'function getERC721Exit(address target, uint256 tokenId) view returns (address)',
  'function moduleHash(address) view returns (bytes32)',
  'function nameToAddress(bytes32) view returns (address)',
  'function onActivateModule(address msgSender, uint256 nonce, bytes32 communityId, address condition)',
  'function onChallenge() returns (uint256)',
  'function onClaimUsername(address msgSender, uint256 nonce, bytes32 shortString)',
  'function onCreateCommunity(address msgSender, uint256 nonce, address governanceToken, bytes32 metadata)',
  'function onCreateProposal(address msgSender, uint256 nonce, address vault, string title, bytes actions)',
  'function onCreateVault(address msgSender, uint256 nonce, bytes32 communityId, address condition)',
  'function onDeposit(address token, address owner, uint256 value)',
  'function onExitToken(address msgSender, uint256 nonce, address token, address to, uint256 value)',
  'function onFinalizeSolution(uint256 blockNumber, bytes32 hash)',
  'function onProcessProposal(address msgSender, uint256 proposalIndex)',
  'function onSetDelegate(address msgSender, uint256 nonce, address delegatee)',
  'function onSubmitModule(address msgSender, uint256 nonce, address src)',
  'function onSubmitProposal(address msgSender, uint256 nonce, uint256 startingPeriod, string title, string details, bytes actions)',
  'function onSubmitVote(address msgSender, uint256 proposalIndex, uint8 uintVote)',
  'function onTransferToken(address msgSender, uint256 nonce, address token, address to, uint256 value)',
  'function onVoteOnProposal(address msgSender, uint256 nonce, bytes32 proposalId, uint8 signalStrength, uint256 shares, uint256 timestamp)',
  'function submitBlock() payable',
  'function submitSolution()',
  'function tokenOfCommunity(bytes32) view returns (address)',
  'function txNonces(address) view returns (uint256)',
  'function vaultsOfCommunity(bytes32) view returns (address)',
  'function withdraw(address token, uint256 tokenId)'
];

export const EXECUTION_PROXY_ABI = [
  'function delegate() view returns (address)',
  'function executed(uint256) view returns (bool)',
  'function execute(uint256 proposalIndex, bytes actions)'
];
